// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload.proto

/*
Package upload is a generated protocol buffer package.

It is generated from these files:
	upload.proto

It has these top-level messages:
	UpRequest
	UpResponse
	GetRequest
	GetResponse
*/
package upload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpRequest struct {
	Path        string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *UpRequest) Reset()                    { *m = UpRequest{} }
func (m *UpRequest) String() string            { return proto.CompactTextString(m) }
func (*UpRequest) ProtoMessage()               {}
func (*UpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpResponse struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *UpResponse) Reset()                    { *m = UpResponse{} }
func (m *UpResponse) String() string            { return proto.CompactTextString(m) }
func (*UpResponse) ProtoMessage()               {}
func (*UpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpResponse) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type GetRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetResponse struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*UpRequest)(nil), "upload.upRequest")
	proto.RegisterType((*UpResponse)(nil), "upload.upResponse")
	proto.RegisterType((*GetRequest)(nil), "upload.getRequest")
	proto.RegisterType((*GetResponse)(nil), "upload.getResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UploadImages service

type UploadImagesClient interface {
	UpImage(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpResponse, error)
	GetImage(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type uploadImagesClient struct {
	cc *grpc.ClientConn
}

func NewUploadImagesClient(cc *grpc.ClientConn) UploadImagesClient {
	return &uploadImagesClient{cc}
}

func (c *uploadImagesClient) UpImage(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpResponse, error) {
	out := new(UpResponse)
	err := grpc.Invoke(ctx, "/upload.UploadImages/UpImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadImagesClient) GetImage(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/upload.UploadImages/GetImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UploadImages service

type UploadImagesServer interface {
	UpImage(context.Context, *UpRequest) (*UpResponse, error)
	GetImage(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterUploadImagesServer(s *grpc.Server, srv UploadImagesServer) {
	s.RegisterService(&_UploadImages_serviceDesc, srv)
}

func _UploadImages_UpImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadImagesServer).UpImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.UploadImages/UpImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadImagesServer).UpImage(ctx, req.(*UpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadImages_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadImagesServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.UploadImages/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadImagesServer).GetImage(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadImages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upload.UploadImages",
	HandlerType: (*UploadImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpImage",
			Handler:    _UploadImages_UpImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _UploadImages_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload.proto",
}

func init() { proto.RegisterFile("upload.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x24, 0x29, 0xf4, 0xb1, 0xad, 0x10, 0x2c, 0x17, 0xab, 0xe2, 0x10, 0xf9, 0x80, 0x7a, 0xea,
	0xa1, 0x88, 0x0f, 0xe0, 0x84, 0x38, 0x62, 0xa9, 0x1f, 0x60, 0xea, 0x55, 0xb0, 0x14, 0x62, 0xe3,
	0xc7, 0x81, 0xbf, 0x47, 0xb1, 0x93, 0x10, 0xb8, 0xf4, 0x36, 0x3b, 0xb3, 0x8f, 0x99, 0x85, 0x4d,
	0xb4, 0x8d, 0x91, 0x6a, 0x6f, 0x9d, 0x09, 0x06, 0xe7, 0xb9, 0xe2, 0xcf, 0xb0, 0x8a, 0x56, 0xd0,
	0x57, 0x24, 0x1f, 0x10, 0xe1, 0xd2, 0xca, 0xf0, 0xc1, 0xca, 0xaa, 0xd8, 0xad, 0x44, 0xc2, 0x58,
	0xc1, 0x5a, 0x91, 0x3f, 0x39, 0x6d, 0x83, 0x36, 0x2d, 0x9b, 0x25, 0x69, 0x4a, 0xf1, 0x07, 0x80,
	0x6e, 0x85, 0xb7, 0xa6, 0xf5, 0x84, 0x0c, 0x16, 0x27, 0x47, 0x32, 0x90, 0x62, 0x45, 0x55, 0xec,
	0x96, 0x62, 0x28, 0xf9, 0x3d, 0x40, 0x4d, 0x61, 0xb8, 0x75, 0x0d, 0xa5, 0xce, 0x2d, 0x57, 0xa2,
	0xd4, 0x8a, 0xbf, 0xc1, 0x3a, 0xa9, 0xfd, 0x9a, 0x7f, 0x32, 0xde, 0xc0, 0x2c, 0xba, 0xa6, 0x77,
	0xd6, 0xc1, 0xf3, 0xc6, 0x0e, 0xdf, 0xb0, 0x39, 0xa6, 0x94, 0xaf, 0x9f, 0xb2, 0x26, 0x8f, 0x07,
	0x58, 0x1c, 0x6d, 0xc2, 0x78, 0xbb, 0xef, 0xbf, 0x31, 0x86, 0xdf, 0xe2, 0x94, 0xca, 0x2e, 0xf8,
	0x05, 0x3e, 0xc1, 0xf2, 0x85, 0x42, 0x1e, 0x1a, 0x3b, 0x7e, 0x63, 0x6c, 0xef, 0xfe, 0x70, 0xc3,
	0xd8, 0xfb, 0x3c, 0x7d, 0xf9, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xce, 0x77, 0xb0, 0xb7, 0x75,
	0x01, 0x00, 0x00,
}
